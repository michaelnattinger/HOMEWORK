The code for my solution to hw2 question 1 is below. It consists of a main runfile which references a few functions, which themselves reference other scripts and functions. I will try to label each separate file but please if you have questions about it ask me (nattinger@wisc.edu) and I will happily send the .m files in a zip.

%%%%% Main Runfile (ps2_q1.m):

mkdir('pings')
clear; close all; clc
param  = parameters();
[mod,ss,lin] = calcmodss(param,0,[]);
param2 = param;
param2.pz = param2.pz+0.1;
tic
[mod2,ss2,lin2,tay_sim,ex_sim,sh_sim] = calcmodss(param2,1,[ss.y.k ss.y.c]');
toc

%% Plot results for pset solutions
figure
for j=1:2
subplot(2,1,j)
plot([ones(1,4)*ss.y.(mod.yn{j}) tay_sim(j,:)],'k')
hold on
plot(ones(20,1)*ss.y.(mod.yn{j}),'b:')
plot(ones(20,1)*ss2.y.(mod.yn{j}),'r:')
hold off
title(['Taylor approximation results: ' mod.yn{j}])
legend(mod.yn{j},'original ss','ss post prod. shock','Location','NorthWest')
end
set(gcf,'Color',[1 1 1])
cd('pings')
saveas(gcf,'taylor.png')
cd('..')
figure
for j=1:2
subplot(2,1,j)
plot([ones(1,4)*ss.y.(mod.yn{j}) ex_sim(j,:)],'k')
hold on
plot(ones(20,1)*ss.y.(mod.yn{j}),'b:')
plot(ones(20,1)*ss2.y.(mod.yn{j}),'r:')
hold off
title(['Exact results using taylor c_{t0}: ' mod.yn{j}])
legend(mod.yn{j},'original ss','ss post prod. shock','Location','NorthWest')
end
set(gcf,'Color',[1 1 1])
cd('pings')
saveas(gcf,'exact.png')
cd('..')
figure
for j=1:2
subplot(2,1,j)
plot([ones(1,4)*ss.y.(mod.yn{j}) sh_sim(j,:)],'k')
hold on
plot(ones(20,1)*ss.y.(mod.yn{j}),'b:')
plot(ones(20,1)*ss2.y.(mod.yn{j}),'r:')
hold off
xlim([1 20])
title(['Simulation results: ' mod.yn{j} ', shooting method'])
legend(mod.yn{j},'original ss','ss post prod. shock','Location','NorthWest')
end
set(gcf,'Color',[1 1 1])
cd('pings')
saveas(gcf,'sh.png')
cd('..')

%%%%% parameters.m
function param = parameters()
% Sets parameters for model solution
param.pbeta  = 0.97;
param.palpha = 0.3;
param.pz     = 1.0;
param.pdelta = 0.1;
end

%%%%% calcmodss.m
function [mod,ss,lin,tay_sim,ex_sim,sh_sim] = calcmodss(param,do_sims,y0)
% Calculates model and ss as defined in : model.m script and steadystate.m
% script - Michael B. Nattinger, 9/9/20
model
steadystate
linearize
if do_sims
T = 20; t0 = 5;
[tay_sim,y0] = taylor_sim(lin,ss,T,t0,y0);
T = 16;
exact_sim
ex_sim = simsim;
sh_method_sim
else
sh_sim=[]; sh_c=[]; ex_sim=[]; simsim=[];
end
end


%%%%% model.m
% Define model for symbolic toolbox
% Michael B Nattinger 9/9/2020
syms k k_p c c_p
syms pbeta palpha pz pdelta
% Define model equations
f1 = k_p == pz*k^(palpha) + (1-pdelta)*k - c;
f2 = pbeta/c_p == (c)^(-1)*(1-pdelta + palpha*pz*k_p^(palpha - 1))^(-1);
% Create mod with parameters, variables, functions
mod.p  = [pbeta palpha pz pdelta];
mod.y  = [k c];
mod.yp = [k_p c_p];
mod.f  = [f1 f2];
mod.pn = fieldnames(param);


%%%%% steadystate.m
% Evaluate steady state values for model
% Michael B Nattinger, 9/9/2020
ss.f = subs(mod.f,mod.yp,mod.y); % steady state: yp = y = yss
for i = 1:length(mod.pn)
eval(['ss.f = subs(ss.f, ' mod.pn{i} ',param.(mod.pn{i}));']); % plug in parameters
end
ss.y = solve(ss.f,mod.y); % solve for y
mod.yn = fieldnames(ss.y);
for i = 1:length(mod.yn)
ss.y.(mod.yn{i}) = double(subs(ss.y.(mod.yn{i}))); % store ss value as a double
end


%%%%% linearize.m
%Linearize about the steady state
%Michael B Nattinger 9/9/2020
lin.yp = solve(mod.f,mod.yp); % solve for yp
lin.f = [];
ypn = fieldnames(lin.yp);
for i=1:length(ypn)
    lin.f = [lin.f; lin.yp.(ypn{i})]; %build vector for calculating jac
end
lin.jac = jacobian(lin.f,mod.y); % jacobian
lin.ssjac = lin.jac;
% eval w/ params
for i = 1:length(mod.pn)
eval(['lin.ssjac = subs(lin.ssjac, ' mod.pn{i} ',param.(mod.pn{i}));']); % plug in parameters
end
% eval w/ vars
for i=1:length(mod.yn)
lin.ssjac = subs(lin.ssjac,mod.y(i),ss.y.(mod.yn{i}));
end
% Convert to double
lin.ssjac = double(subs(lin.ssjac));
[lin.sseigvecs,lin.sseigvals] = eig(lin.ssjac);

%%%%% taylor_sim.m
function [tay_sim,y0] = taylor_sim(lin,ss,T,t0,y0)
% 1. solve for c_1,c_2
c_1 = 0; % Nonexplosive soln
c_2 = (y0(1) - ss.y.k)/(lin.sseigvecs(1,2)*lin.sseigvals(2,2)^(t0));
y0(2) = c_2*lin.sseigvecs(2,2)*lin.sseigvals(2,2)^(t0) + ss.y.c;
t = t0:T;
tay_sim = zeros(length(y0),length(t));
count = 1;
for tt=t
    tay_sim(:,count) = (lin.sseigvecs .* [c_1 c_2]) * diag(lin.sseigvals.^tt) + [ss.y.k ; ss.y.c];
    count = count+1;
end


%%%%% exact_sim.m
[ny,ny0] = size(y0);
simsim = zeros(ny,T,ny0);
for i=1:ny0
    simsim(:,1,i) = y0(:,i); % Initial values
end

% solve for equations we can use to project exactly into the future
for i=1:ny0 % for each sim corresponding to each initial value...
for tt=2:T  % for each point in time...
simsim(1,tt,i) = param.pz * simsim(1,tt-1,i)^(param.palpha) + (1 - param.pdelta)*simsim(1,tt-1,i) - simsim(2,tt-1,i);
simsim(1,tt,i) = max([0.001 simsim(1,tt,i)]); % must be positive
simsim(2,tt,i) = param.pbeta*simsim(2,tt-1,i)*(1 - param.pdelta + param.palpha*param.pz * simsim(1,tt,i)^(param.palpha - 1));
simsim(2,tt,i) = max([0.001 simsim(2,tt,i)]); % must be positive
end
end


%%%%% sh_method_sim.m
ng = 50000;
grid = linspace(1.099772720277396,ss.y.c,ng);
y0 = [y0(1)+0*grid;grid];
T = 50;
exact_sim
[~,i_opt] = min(abs(ss.y.c - simsim(2,end,:)));
sh_sim = squeeze(simsim(:,:,i_opt));
sh_c = grid(i_opt);


%%%%% phase_diagram_ps2.m
clear; close all; clc

kgrid = 0.01:0.01:5;
p = parameters();
[mod,ss,lin] = calcmodss(p,0,[]);
p2 = p;
p2.pz = p.pz + 0.1;
[mod2,ss2,lin2] = calcmodss(p2,0,[]);
f = p.pz*kgrid.^p.palpha;
delk0 = f - kgrid*p.pdelta;
delc0 = f + (1 - p.pdelta)*kgrid - ss.y.k;
f2 = p2.pz*kgrid.^p2.palpha;
delk02 = f2 - kgrid*p2.pdelta;
delc02 = f2 + (1 - p2.pdelta)*kgrid - ss2.y.k;
sad2 = (lin2.sseigvecs(2,2)/lin2.sseigvecs(1,2))*(kgrid - ss2.y.k) + ss2.y.c;
sad = (lin.sseigvecs(2,2)/lin.sseigvecs(1,2))*(kgrid - ss.y.k) + ss.y.c;

figure
plot(kgrid,delk0,'k-.')
hold on
plot(kgrid,delc0,'b-.')
plot(kgrid,delk02,'k-')
plot(kgrid,delc02,'b-')
plot(ss.y.k,ss.y.c,'rx')
plot(ss2.y.k,ss2.y.c,'r+')
plot(ss.y.k,1.1762,'ro')
plot([ss.y.k ss.y.k],[ss.y.c 1.1762],'r:')
plot(kgrid,sad,'m-.')
plot(kgrid,sad2,'m-')
plot([ss.y.k ss2.y.k],[1.1762 ss2.y.c],'r-')
hold off
set(gcf,'Color',[1 1 1])
title('Phase diagram')
ylim([1 1.5])
xlim([3 4])
xlabel('K')
ylabel('C')
annotation('arrow',[0.2 0.25],[0.17 0.17])
annotation('arrow',[0.2 0.2],[0.17 0.22])
annotation('arrow',[0.85 0.8],[0.7 0.7])
annotation('arrow',[0.85 0.85],[0.7 0.65])
annotation('arrow',[0.25 0.2],[0.65 0.65])
annotation('arrow',[0.25 0.25],[0.65 0.7])
annotation('arrow',[0.8 0.85],[0.22 0.22])
annotation('arrow',[0.8 0.8],[0.22 0.17])
cd('pings')
saveas(gcf,'phase.png')
cd('..')